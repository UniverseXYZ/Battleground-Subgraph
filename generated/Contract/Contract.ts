// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogBattleEntered extends ethereum.Event {
  get params(): LogBattleEntered__Params {
    return new LogBattleEntered__Params(this);
  }
}

export class LogBattleEntered__Params {
  _event: LogBattleEntered;

  constructor(event: LogBattleEntered) {
    this._event = event;
  }

  get polymorphId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get skillType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minStats(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxStats(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogLinkExchanged extends ethereum.Event {
  get params(): LogLinkExchanged__Params {
    return new LogLinkExchanged__Params(this);
  }
}

export class LogLinkExchanged__Params {
  _event: LogLinkExchanged;

  constructor(event: LogLinkExchanged) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get initiator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogPolymorphsBattled extends ethereum.Event {
  get params(): LogPolymorphsBattled__Params {
    return new LogPolymorphsBattled__Params(this);
  }
}

export class LogPolymorphsBattled__Params {
  _event: LogPolymorphsBattled;

  constructor(event: LogPolymorphsBattled) {
    this._event = event;
  }

  get firstPolymorphId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get firstPolymorphStats(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get firstPolymorphSkillType(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get firstPolymorphAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get firstPolymorphRandomNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get secondPolymorphId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get secondPolymorphStats(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get secondPolymorphSkillType(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get secondPolymorphAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get secondPolymorphRandomNumber(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get wager(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get roundIndex(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class LogRewardsClaimed extends ethereum.Event {
  get params(): LogRewardsClaimed__Params {
    return new LogRewardsClaimed__Params(this);
  }
}

export class LogRewardsClaimed__Params {
  _event: LogRewardsClaimed;

  constructor(event: LogRewardsClaimed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogRoundExecuted extends ethereum.Event {
  get params(): LogRoundExecuted__Params {
    return new LogRoundExecuted__Params(this);
  }
}

export class LogRoundExecuted__Params {
  _event: LogRoundExecuted;

  constructor(event: LogRoundExecuted) {
    this._event = event;
  }

  get roundIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogRoundStarted extends ethereum.Event {
  get params(): LogRoundStarted__Params {
    return new LogRoundStarted__Params(this);
  }
}

export class LogRoundStarted__Params {
  _event: LogRoundStarted;

  constructor(event: LogRoundStarted) {
    this._event = event;
  }

  get roundIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__entitiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class Contract__getStatsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__getStatsPointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  battlePoolIndex(): BigInt {
    let result = super.call(
      "battlePoolIndex",
      "battlePoolIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_battlePoolIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "battlePoolIndex",
      "battlePoolIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battlePools(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "battlePools",
      "battlePools(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_battlePools(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "battlePools",
      "battlePools(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoAddress(): Address {
    let result = super.call("daoAddress", "daoAddress():(address)", []);

    return result[0].toAddress();
  }

  try_daoAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("daoAddress", "daoAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoFeeBps(): BigInt {
    let result = super.call("daoFeeBps", "daoFeeBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoFeeBps", "daoFeeBps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entities(param0: BigInt, param1: BigInt): Contract__entitiesResult {
    let result = super.call(
      "entities",
      "entities(uint256,uint256):(uint256,uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__entitiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_entities(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Contract__entitiesResult> {
    let result = super.tryCall(
      "entities",
      "entities(uint256,uint256):(uint256,uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__entitiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  expand(randomValue: BigInt, n: BigInt): Array<BigInt> {
    let result = super.call("expand", "expand(uint256,uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(randomValue),
      ethereum.Value.fromUnsignedBigInt(n)
    ]);

    return result[0].toBigIntArray();
  }

  try_expand(
    randomValue: BigInt,
    n: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "expand",
      "expand(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(randomValue),
        ethereum.Value.fromUnsignedBigInt(n)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  finishRoundIncetive(): BigInt {
    let result = super.call(
      "finishRoundIncetive",
      "finishRoundIncetive():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_finishRoundIncetive(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finishRoundIncetive",
      "finishRoundIncetive():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeesAmount(
    wager: BigInt,
    ethAmount: BigInt,
    poolLength: BigInt,
    startRoundIncetive: BigInt,
    finishRoundIncetive: BigInt
  ): BigInt {
    let result = super.call(
      "getFeesAmount",
      "getFeesAmount(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(ethAmount),
        ethereum.Value.fromUnsignedBigInt(poolLength),
        ethereum.Value.fromUnsignedBigInt(startRoundIncetive),
        ethereum.Value.fromUnsignedBigInt(finishRoundIncetive)
      ]
    );

    return result[0].toBigInt();
  }

  try_getFeesAmount(
    wager: BigInt,
    ethAmount: BigInt,
    poolLength: BigInt,
    startRoundIncetive: BigInt,
    finishRoundIncetive: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeesAmount",
      "getFeesAmount(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(ethAmount),
        ethereum.Value.fromUnsignedBigInt(poolLength),
        ethereum.Value.fromUnsignedBigInt(startRoundIncetive),
        ethereum.Value.fromUnsignedBigInt(finishRoundIncetive)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStats(gene: BigInt, skillType: BigInt): Contract__getStatsResult {
    let result = super.call(
      "getStats",
      "getStats(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gene),
        ethereum.Value.fromUnsignedBigInt(skillType)
      ]
    );

    return new Contract__getStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStats(
    gene: BigInt,
    skillType: BigInt
  ): ethereum.CallResult<Contract__getStatsResult> {
    let result = super.tryCall(
      "getStats",
      "getStats(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gene),
        ethereum.Value.fromUnsignedBigInt(skillType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getStatsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getStatsPoints(
    polymorphId: BigInt,
    skillType: BigInt
  ): Contract__getStatsPointsResult {
    let result = super.call(
      "getStatsPoints",
      "getStatsPoints(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(polymorphId),
        ethereum.Value.fromUnsignedBigInt(skillType)
      ]
    );

    return new Contract__getStatsPointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStatsPoints(
    polymorphId: BigInt,
    skillType: BigInt
  ): ethereum.CallResult<Contract__getStatsPointsResult> {
    let result = super.tryCall(
      "getStatsPoints",
      "getStatsPoints(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(polymorphId),
        ethereum.Value.fromUnsignedBigInt(skillType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getStatsPointsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  inRound(): boolean {
    let result = super.call("inRound", "inRound():(bool)", []);

    return result[0].toBoolean();
  }

  try_inRound(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inRound", "inRound():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkAddress(): Address {
    let result = super.call("linkAddress", "linkAddress():(address)", []);

    return result[0].toAddress();
  }

  try_linkAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkAddress", "linkAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxPoolSize(): BigInt {
    let result = super.call("maxPoolSize", "maxPoolSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPoolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPoolSize", "maxPoolSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minPoolSize(): BigInt {
    let result = super.call("minPoolSize", "minPoolSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minPoolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minPoolSize", "minPoolSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operationalFeeBps(): BigInt {
    let result = super.call(
      "operationalFeeBps",
      "operationalFeeBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_operationalFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "operationalFeeBps",
      "operationalFeeBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paidEthAmountForLinkSwap(): BigInt {
    let result = super.call(
      "paidEthAmountForLinkSwap",
      "paidEthAmountForLinkSwap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paidEthAmountForLinkSwap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paidEthAmountForLinkSwap",
      "paidEthAmountForLinkSwap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  participatedBattlePoolIndex(param0: Address): BigInt {
    let result = super.call(
      "participatedBattlePoolIndex",
      "participatedBattlePoolIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_participatedBattlePoolIndex(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "participatedBattlePoolIndex",
      "participatedBattlePoolIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playerBalances(param0: Address): BigInt {
    let result = super.call(
      "playerBalances",
      "playerBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_playerBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "playerBalances",
      "playerBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  polymorphsContractAddress(): Address {
    let result = super.call(
      "polymorphsContractAddress",
      "polymorphsContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_polymorphsContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "polymorphsContractAddress",
      "polymorphsContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randomNumber(): BigInt {
    let result = super.call("randomNumber", "randomNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_randomNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randomNumber", "randomNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rngChainlinkCost(): BigInt {
    let result = super.call(
      "rngChainlinkCost",
      "rngChainlinkCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rngChainlinkCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rngChainlinkCost",
      "rngChainlinkCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundFees(): BigInt {
    let result = super.call("roundFees", "roundFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundFees", "roundFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundIndex(): BigInt {
    let result = super.call("roundIndex", "roundIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundIndex", "roundIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startRoundIncetive(): BigInt {
    let result = super.call(
      "startRoundIncetive",
      "startRoundIncetive():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_startRoundIncetive(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startRoundIncetive",
      "startRoundIncetive():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapV3Router(): Address {
    let result = super.call(
      "uniswapV3Router",
      "uniswapV3Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV3Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV3Router",
      "uniswapV3Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wager(): BigInt {
    let result = super.call("wager", "wager():(uint256)", []);

    return result[0].toBigInt();
  }

  try_wager(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wager", "wager():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wethAddress(): Address {
    let result = super.call("wethAddress", "wethAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wethAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethAddress", "wethAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get fees(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _daoAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class EnterBattleCall extends ethereum.Call {
  get inputs(): EnterBattleCall__Inputs {
    return new EnterBattleCall__Inputs(this);
  }

  get outputs(): EnterBattleCall__Outputs {
    return new EnterBattleCall__Outputs(this);
  }
}

export class EnterBattleCall__Inputs {
  _call: EnterBattleCall;

  constructor(call: EnterBattleCall) {
    this._call = call;
  }

  get polymorphId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get skillType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnterBattleCall__Outputs {
  _call: EnterBattleCall;

  constructor(call: EnterBattleCall) {
    this._call = call;
  }
}

export class FinishRoundCall extends ethereum.Call {
  get inputs(): FinishRoundCall__Inputs {
    return new FinishRoundCall__Inputs(this);
  }

  get outputs(): FinishRoundCall__Outputs {
    return new FinishRoundCall__Outputs(this);
  }
}

export class FinishRoundCall__Inputs {
  _call: FinishRoundCall;

  constructor(call: FinishRoundCall) {
    this._call = call;
  }
}

export class FinishRoundCall__Outputs {
  _call: FinishRoundCall;

  constructor(call: FinishRoundCall) {
    this._call = call;
  }
}

export class InitItemsCall extends ethereum.Call {
  get inputs(): InitItemsCall__Inputs {
    return new InitItemsCall__Inputs(this);
  }

  get outputs(): InitItemsCall__Outputs {
    return new InitItemsCall__Outputs(this);
  }
}

export class InitItemsCall__Inputs {
  _call: InitItemsCall;

  constructor(call: InitItemsCall) {
    this._call = call;
  }

  get _itemsArr(): Array<InitItemsCall_itemsArrStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      InitItemsCall_itemsArrStruct
    >();
  }
}

export class InitItemsCall__Outputs {
  _call: InitItemsCall;

  constructor(call: InitItemsCall) {
    this._call = call;
  }
}

export class InitItemsCall_itemsArrStruct extends ethereum.Tuple {
  get aMin(): BigInt {
    return this[0].toBigInt();
  }

  get aMax(): BigInt {
    return this[1].toBigInt();
  }

  get dMin(): BigInt {
    return this[2].toBigInt();
  }

  get dMax(): BigInt {
    return this[3].toBigInt();
  }

  get genePos(): BigInt {
    return this[4].toBigInt();
  }

  get itemIndex(): BigInt {
    return this[5].toBigInt();
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class SetFinishRoundIncentiveCall extends ethereum.Call {
  get inputs(): SetFinishRoundIncentiveCall__Inputs {
    return new SetFinishRoundIncentiveCall__Inputs(this);
  }

  get outputs(): SetFinishRoundIncentiveCall__Outputs {
    return new SetFinishRoundIncentiveCall__Outputs(this);
  }
}

export class SetFinishRoundIncentiveCall__Inputs {
  _call: SetFinishRoundIncentiveCall;

  constructor(call: SetFinishRoundIncentiveCall) {
    this._call = call;
  }

  get incentive(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFinishRoundIncentiveCall__Outputs {
  _call: SetFinishRoundIncentiveCall;

  constructor(call: SetFinishRoundIncentiveCall) {
    this._call = call;
  }
}

export class SetStartRoundIncentiveCall extends ethereum.Call {
  get inputs(): SetStartRoundIncentiveCall__Inputs {
    return new SetStartRoundIncentiveCall__Inputs(this);
  }

  get outputs(): SetStartRoundIncentiveCall__Outputs {
    return new SetStartRoundIncentiveCall__Outputs(this);
  }
}

export class SetStartRoundIncentiveCall__Inputs {
  _call: SetStartRoundIncentiveCall;

  constructor(call: SetStartRoundIncentiveCall) {
    this._call = call;
  }

  get incentive(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartRoundIncentiveCall__Outputs {
  _call: SetStartRoundIncentiveCall;

  constructor(call: SetStartRoundIncentiveCall) {
    this._call = call;
  }
}

export class StartRoundCall extends ethereum.Call {
  get inputs(): StartRoundCall__Inputs {
    return new StartRoundCall__Inputs(this);
  }

  get outputs(): StartRoundCall__Outputs {
    return new StartRoundCall__Outputs(this);
  }
}

export class StartRoundCall__Inputs {
  _call: StartRoundCall;

  constructor(call: StartRoundCall) {
    this._call = call;
  }
}

export class StartRoundCall__Outputs {
  _call: StartRoundCall;

  constructor(call: StartRoundCall) {
    this._call = call;
  }
}

export class SwapAndPopEntityCall extends ethereum.Call {
  get inputs(): SwapAndPopEntityCall__Inputs {
    return new SwapAndPopEntityCall__Inputs(this);
  }

  get outputs(): SwapAndPopEntityCall__Outputs {
    return new SwapAndPopEntityCall__Outputs(this);
  }
}

export class SwapAndPopEntityCall__Inputs {
  _call: SwapAndPopEntityCall;

  constructor(call: SwapAndPopEntityCall) {
    this._call = call;
  }

  get polymoprhIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapAndPopEntityCall__Outputs {
  _call: SwapAndPopEntityCall;

  constructor(call: SwapAndPopEntityCall) {
    this._call = call;
  }
}
