// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BattleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BattleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BattleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BattleEntity", id.toString(), this);
  }

  static load(id: string): BattleEntity | null {
    return store.get("BattleEntity", id) as BattleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get polymorphId(): BigInt {
    let value = this.get("polymorphId");
    return value.toBigInt();
  }

  set polymorphId(value: BigInt) {
    this.set("polymorphId", Value.fromBigInt(value));
  }

  get skillType(): BigInt {
    let value = this.get("skillType");
    return value.toBigInt();
  }

  set skillType(value: BigInt) {
    this.set("skillType", Value.fromBigInt(value));
  }

  get statsMin(): BigInt {
    let value = this.get("statsMin");
    return value.toBigInt();
  }

  set statsMin(value: BigInt) {
    this.set("statsMin", Value.fromBigInt(value));
  }

  get statsMax(): BigInt {
    let value = this.get("statsMax");
    return value.toBigInt();
  }

  set statsMax(value: BigInt) {
    this.set("statsMax", Value.fromBigInt(value));
  }

  get wins(): BigInt {
    let value = this.get("wins");
    return value.toBigInt();
  }

  set wins(value: BigInt) {
    this.set("wins", Value.fromBigInt(value));
  }

  get loses(): BigInt {
    let value = this.get("loses");
    return value.toBigInt();
  }

  set loses(value: BigInt) {
    this.set("loses", Value.fromBigInt(value));
  }
}

export class BattleStatistic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BattleStatistic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BattleStatistic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BattleStatistic", id.toString(), this);
  }

  static load(id: string): BattleStatistic | null {
    return store.get("BattleStatistic", id) as BattleStatistic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get opponentOnePolymorphId(): BigInt {
    let value = this.get("opponentOnePolymorphId");
    return value.toBigInt();
  }

  set opponentOnePolymorphId(value: BigInt) {
    this.set("opponentOnePolymorphId", Value.fromBigInt(value));
  }

  get opponentOneStats(): BigInt {
    let value = this.get("opponentOneStats");
    return value.toBigInt();
  }

  set opponentOneStats(value: BigInt) {
    this.set("opponentOneStats", Value.fromBigInt(value));
  }

  get opponentOneSkillType(): BigInt {
    let value = this.get("opponentOneSkillType");
    return value.toBigInt();
  }

  set opponentOneSkillType(value: BigInt) {
    this.set("opponentOneSkillType", Value.fromBigInt(value));
  }

  get opponentOneAddress(): Bytes {
    let value = this.get("opponentOneAddress");
    return value.toBytes();
  }

  set opponentOneAddress(value: Bytes) {
    this.set("opponentOneAddress", Value.fromBytes(value));
  }

  get opponentOneRandomNumber(): BigInt {
    let value = this.get("opponentOneRandomNumber");
    return value.toBigInt();
  }

  set opponentOneRandomNumber(value: BigInt) {
    this.set("opponentOneRandomNumber", Value.fromBigInt(value));
  }

  get opponentTwoPolymorphId(): BigInt {
    let value = this.get("opponentTwoPolymorphId");
    return value.toBigInt();
  }

  set opponentTwoPolymorphId(value: BigInt) {
    this.set("opponentTwoPolymorphId", Value.fromBigInt(value));
  }

  get opponentTwoStats(): BigInt {
    let value = this.get("opponentTwoStats");
    return value.toBigInt();
  }

  set opponentTwoStats(value: BigInt) {
    this.set("opponentTwoStats", Value.fromBigInt(value));
  }

  get opponentTwoSkillType(): BigInt {
    let value = this.get("opponentTwoSkillType");
    return value.toBigInt();
  }

  set opponentTwoSkillType(value: BigInt) {
    this.set("opponentTwoSkillType", Value.fromBigInt(value));
  }

  get opponentTwoAddress(): Bytes {
    let value = this.get("opponentTwoAddress");
    return value.toBytes();
  }

  set opponentTwoAddress(value: Bytes) {
    this.set("opponentTwoAddress", Value.fromBytes(value));
  }

  get opponentTwoRandomNumber(): BigInt {
    let value = this.get("opponentTwoRandomNumber");
    return value.toBigInt();
  }

  set opponentTwoRandomNumber(value: BigInt) {
    this.set("opponentTwoRandomNumber", Value.fromBigInt(value));
  }

  get winnerId(): BigInt {
    let value = this.get("winnerId");
    return value.toBigInt();
  }

  set winnerId(value: BigInt) {
    this.set("winnerId", Value.fromBigInt(value));
  }

  get loserId(): BigInt {
    let value = this.get("loserId");
    return value.toBigInt();
  }

  set loserId(value: BigInt) {
    this.set("loserId", Value.fromBigInt(value));
  }

  get wager(): BigInt {
    let value = this.get("wager");
    return value.toBigInt();
  }

  set wager(value: BigInt) {
    this.set("wager", Value.fromBigInt(value));
  }

  get roundIndex(): BigInt {
    let value = this.get("roundIndex");
    return value.toBigInt();
  }

  set roundIndex(value: BigInt) {
    this.set("roundIndex", Value.fromBigInt(value));
  }
}
